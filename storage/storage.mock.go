// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go

// Package storage is a generated GoMock package.
package storage

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/shankj3/ocelot/models"
	pb "github.com/shankj3/ocelot/models/pb"
	reflect "reflect"
	time "time"
)

// MockStringy is a mock of Stringy interface
type MockStringy struct {
	ctrl     *gomock.Controller
	recorder *MockStringyMockRecorder
}

// MockStringyMockRecorder is the mock recorder for MockStringy
type MockStringyMockRecorder struct {
	mock *MockStringy
}

// NewMockStringy creates a new mock instance
func NewMockStringy(ctrl *gomock.Controller) *MockStringy {
	mock := &MockStringy{ctrl: ctrl}
	mock.recorder = &MockStringyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStringy) EXPECT() *MockStringyMockRecorder {
	return m.recorder
}

// StorageType mocks base method
func (m *MockStringy) StorageType() string {
	ret := m.ctrl.Call(m, "StorageType")
	ret0, _ := ret[0].(string)
	return ret0
}

// StorageType indicates an expected call of StorageType
func (mr *MockStringyMockRecorder) StorageType() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageType", reflect.TypeOf((*MockStringy)(nil).StorageType))
}

// MockBuildOut is a mock of BuildOut interface
type MockBuildOut struct {
	ctrl     *gomock.Controller
	recorder *MockBuildOutMockRecorder
}

// MockBuildOutMockRecorder is the mock recorder for MockBuildOut
type MockBuildOutMockRecorder struct {
	mock *MockBuildOut
}

// NewMockBuildOut creates a new mock instance
func NewMockBuildOut(ctrl *gomock.Controller) *MockBuildOut {
	mock := &MockBuildOut{ctrl: ctrl}
	mock.recorder = &MockBuildOutMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBuildOut) EXPECT() *MockBuildOutMockRecorder {
	return m.recorder
}

// AddOut mocks base method
func (m *MockBuildOut) AddOut(output *models.BuildOutput) error {
	ret := m.ctrl.Call(m, "AddOut", output)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOut indicates an expected call of AddOut
func (mr *MockBuildOutMockRecorder) AddOut(output interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOut", reflect.TypeOf((*MockBuildOut)(nil).AddOut), output)
}

// RetrieveOut mocks base method
func (m *MockBuildOut) RetrieveOut(buildId int64) (models.BuildOutput, error) {
	ret := m.ctrl.Call(m, "RetrieveOut", buildId)
	ret0, _ := ret[0].(models.BuildOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveOut indicates an expected call of RetrieveOut
func (mr *MockBuildOutMockRecorder) RetrieveOut(buildId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveOut", reflect.TypeOf((*MockBuildOut)(nil).RetrieveOut), buildId)
}

// RetrieveLastOutByHash mocks base method
func (m *MockBuildOut) RetrieveLastOutByHash(gitHash string) (models.BuildOutput, error) {
	ret := m.ctrl.Call(m, "RetrieveLastOutByHash", gitHash)
	ret0, _ := ret[0].(models.BuildOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveLastOutByHash indicates an expected call of RetrieveLastOutByHash
func (mr *MockBuildOutMockRecorder) RetrieveLastOutByHash(gitHash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveLastOutByHash", reflect.TypeOf((*MockBuildOut)(nil).RetrieveLastOutByHash), gitHash)
}

// MockBuildSum is a mock of BuildSum interface
type MockBuildSum struct {
	ctrl     *gomock.Controller
	recorder *MockBuildSumMockRecorder
}

// MockBuildSumMockRecorder is the mock recorder for MockBuildSum
type MockBuildSumMockRecorder struct {
	mock *MockBuildSum
}

// NewMockBuildSum creates a new mock instance
func NewMockBuildSum(ctrl *gomock.Controller) *MockBuildSum {
	mock := &MockBuildSum{ctrl: ctrl}
	mock.recorder = &MockBuildSumMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBuildSum) EXPECT() *MockBuildSumMockRecorder {
	return m.recorder
}

// AddSumStart mocks base method
func (m *MockBuildSum) AddSumStart(hash, account, repo, branch string, by pb.SignaledBy, credId int64) (int64, error) {
	ret := m.ctrl.Call(m, "AddSumStart", hash, account, repo, branch, by, credId)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSumStart indicates an expected call of AddSumStart
func (mr *MockBuildSumMockRecorder) AddSumStart(hash, account, repo, branch, by, credId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSumStart", reflect.TypeOf((*MockBuildSum)(nil).AddSumStart), hash, account, repo, branch, by, credId)
}

// UpdateSum mocks base method
func (m *MockBuildSum) UpdateSum(failed bool, duration float64, id int64) error {
	ret := m.ctrl.Call(m, "UpdateSum", failed, duration, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSum indicates an expected call of UpdateSum
func (mr *MockBuildSumMockRecorder) UpdateSum(failed, duration, id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSum", reflect.TypeOf((*MockBuildSum)(nil).UpdateSum), failed, duration, id)
}

// RetrieveSumByBuildId mocks base method
func (m *MockBuildSum) RetrieveSumByBuildId(buildId int64) (*pb.BuildSummary, error) {
	ret := m.ctrl.Call(m, "RetrieveSumByBuildId", buildId)
	ret0, _ := ret[0].(*pb.BuildSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveSumByBuildId indicates an expected call of RetrieveSumByBuildId
func (mr *MockBuildSumMockRecorder) RetrieveSumByBuildId(buildId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveSumByBuildId", reflect.TypeOf((*MockBuildSum)(nil).RetrieveSumByBuildId), buildId)
}

// RetrieveSum mocks base method
func (m *MockBuildSum) RetrieveSum(gitHash string) ([]*pb.BuildSummary, error) {
	ret := m.ctrl.Call(m, "RetrieveSum", gitHash)
	ret0, _ := ret[0].([]*pb.BuildSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveSum indicates an expected call of RetrieveSum
func (mr *MockBuildSumMockRecorder) RetrieveSum(gitHash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveSum", reflect.TypeOf((*MockBuildSum)(nil).RetrieveSum), gitHash)
}

// RetrieveLatestSum mocks base method
func (m *MockBuildSum) RetrieveLatestSum(gitHash string) (*pb.BuildSummary, error) {
	ret := m.ctrl.Call(m, "RetrieveLatestSum", gitHash)
	ret0, _ := ret[0].(*pb.BuildSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveLatestSum indicates an expected call of RetrieveLatestSum
func (mr *MockBuildSumMockRecorder) RetrieveLatestSum(gitHash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveLatestSum", reflect.TypeOf((*MockBuildSum)(nil).RetrieveLatestSum), gitHash)
}

// RetrieveHashStartsWith mocks base method
func (m *MockBuildSum) RetrieveHashStartsWith(partialGitHash string) ([]*pb.BuildSummary, error) {
	ret := m.ctrl.Call(m, "RetrieveHashStartsWith", partialGitHash)
	ret0, _ := ret[0].([]*pb.BuildSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveHashStartsWith indicates an expected call of RetrieveHashStartsWith
func (mr *MockBuildSumMockRecorder) RetrieveHashStartsWith(partialGitHash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveHashStartsWith", reflect.TypeOf((*MockBuildSum)(nil).RetrieveHashStartsWith), partialGitHash)
}

// RetrieveLastFewSums mocks base method
func (m *MockBuildSum) RetrieveLastFewSums(repo, account string, limit int32) ([]*pb.BuildSummary, error) {
	ret := m.ctrl.Call(m, "RetrieveLastFewSums", repo, account, limit)
	ret0, _ := ret[0].([]*pb.BuildSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveLastFewSums indicates an expected call of RetrieveLastFewSums
func (mr *MockBuildSumMockRecorder) RetrieveLastFewSums(repo, account, limit interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveLastFewSums", reflect.TypeOf((*MockBuildSum)(nil).RetrieveLastFewSums), repo, account, limit)
}

// RetrieveAcctRepo mocks base method
func (m *MockBuildSum) RetrieveAcctRepo(partialRepo string) ([]*pb.BuildSummary, error) {
	ret := m.ctrl.Call(m, "RetrieveAcctRepo", partialRepo)
	ret0, _ := ret[0].([]*pb.BuildSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveAcctRepo indicates an expected call of RetrieveAcctRepo
func (mr *MockBuildSumMockRecorder) RetrieveAcctRepo(partialRepo interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveAcctRepo", reflect.TypeOf((*MockBuildSum)(nil).RetrieveAcctRepo), partialRepo)
}

// StartBuild mocks base method
func (m *MockBuildSum) StartBuild(id int64) error {
	ret := m.ctrl.Call(m, "StartBuild", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartBuild indicates an expected call of StartBuild
func (mr *MockBuildSumMockRecorder) StartBuild(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartBuild", reflect.TypeOf((*MockBuildSum)(nil).StartBuild), id)
}

// StoreFailedValidation mocks base method
func (m *MockBuildSum) StoreFailedValidation(id int64) error {
	ret := m.ctrl.Call(m, "StoreFailedValidation", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreFailedValidation indicates an expected call of StoreFailedValidation
func (mr *MockBuildSumMockRecorder) StoreFailedValidation(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreFailedValidation", reflect.TypeOf((*MockBuildSum)(nil).StoreFailedValidation), id)
}

// SetQueueTime mocks base method
func (m *MockBuildSum) SetQueueTime(id int64) error {
	ret := m.ctrl.Call(m, "SetQueueTime", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetQueueTime indicates an expected call of SetQueueTime
func (mr *MockBuildSumMockRecorder) SetQueueTime(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetQueueTime", reflect.TypeOf((*MockBuildSum)(nil).SetQueueTime), id)
}

// GetTrackedRepos mocks base method
func (m *MockBuildSum) GetTrackedRepos() (*pb.AcctRepos, error) {
	ret := m.ctrl.Call(m, "GetTrackedRepos")
	ret0, _ := ret[0].(*pb.AcctRepos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrackedRepos indicates an expected call of GetTrackedRepos
func (mr *MockBuildSumMockRecorder) GetTrackedRepos() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrackedRepos", reflect.TypeOf((*MockBuildSum)(nil).GetTrackedRepos))
}

// GetLastSuccessfulBuildHash mocks base method
func (m *MockBuildSum) GetLastSuccessfulBuildHash(account, repo, branch string) (string, error) {
	ret := m.ctrl.Call(m, "GetLastSuccessfulBuildHash", account, repo, branch)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastSuccessfulBuildHash indicates an expected call of GetLastSuccessfulBuildHash
func (mr *MockBuildSumMockRecorder) GetLastSuccessfulBuildHash(account, repo, branch interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastSuccessfulBuildHash", reflect.TypeOf((*MockBuildSum)(nil).GetLastSuccessfulBuildHash), account, repo, branch)
}

// MockBuildStage is a mock of BuildStage interface
type MockBuildStage struct {
	ctrl     *gomock.Controller
	recorder *MockBuildStageMockRecorder
}

// MockBuildStageMockRecorder is the mock recorder for MockBuildStage
type MockBuildStageMockRecorder struct {
	mock *MockBuildStage
}

// NewMockBuildStage creates a new mock instance
func NewMockBuildStage(ctrl *gomock.Controller) *MockBuildStage {
	mock := &MockBuildStage{ctrl: ctrl}
	mock.recorder = &MockBuildStageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBuildStage) EXPECT() *MockBuildStageMockRecorder {
	return m.recorder
}

// AddStageDetail mocks base method
func (m *MockBuildStage) AddStageDetail(stageResult *models.StageResult) error {
	ret := m.ctrl.Call(m, "AddStageDetail", stageResult)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddStageDetail indicates an expected call of AddStageDetail
func (mr *MockBuildStageMockRecorder) AddStageDetail(stageResult interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStageDetail", reflect.TypeOf((*MockBuildStage)(nil).AddStageDetail), stageResult)
}

// RetrieveStageDetail mocks base method
func (m *MockBuildStage) RetrieveStageDetail(buildId int64) ([]models.StageResult, error) {
	ret := m.ctrl.Call(m, "RetrieveStageDetail", buildId)
	ret0, _ := ret[0].([]models.StageResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveStageDetail indicates an expected call of RetrieveStageDetail
func (mr *MockBuildStageMockRecorder) RetrieveStageDetail(buildId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveStageDetail", reflect.TypeOf((*MockBuildStage)(nil).RetrieveStageDetail), buildId)
}

// MockPollTable is a mock of PollTable interface
type MockPollTable struct {
	ctrl     *gomock.Controller
	recorder *MockPollTableMockRecorder
}

// MockPollTableMockRecorder is the mock recorder for MockPollTable
type MockPollTableMockRecorder struct {
	mock *MockPollTable
}

// NewMockPollTable creates a new mock instance
func NewMockPollTable(ctrl *gomock.Controller) *MockPollTable {
	mock := &MockPollTable{ctrl: ctrl}
	mock.recorder = &MockPollTableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPollTable) EXPECT() *MockPollTableMockRecorder {
	return m.recorder
}

// InsertPoll mocks base method
func (m *MockPollTable) InsertPoll(account, repo, cronString, branches string, credsId int64) error {
	ret := m.ctrl.Call(m, "InsertPoll", account, repo, cronString, branches, credsId)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertPoll indicates an expected call of InsertPoll
func (mr *MockPollTableMockRecorder) InsertPoll(account, repo, cronString, branches, credsId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertPoll", reflect.TypeOf((*MockPollTable)(nil).InsertPoll), account, repo, cronString, branches, credsId)
}

// UpdatePoll mocks base method
func (m *MockPollTable) UpdatePoll(account, repo, cronString, branches string) error {
	ret := m.ctrl.Call(m, "UpdatePoll", account, repo, cronString, branches)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePoll indicates an expected call of UpdatePoll
func (mr *MockPollTableMockRecorder) UpdatePoll(account, repo, cronString, branches interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePoll", reflect.TypeOf((*MockPollTable)(nil).UpdatePoll), account, repo, cronString, branches)
}

// SetLastData mocks base method
func (m *MockPollTable) SetLastData(account, repo string, lasthashes map[string]string) error {
	ret := m.ctrl.Call(m, "SetLastData", account, repo, lasthashes)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLastData indicates an expected call of SetLastData
func (mr *MockPollTableMockRecorder) SetLastData(account, repo, lasthashes interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLastData", reflect.TypeOf((*MockPollTable)(nil).SetLastData), account, repo, lasthashes)
}

// GetLastData mocks base method
func (m *MockPollTable) GetLastData(accountRepo string) (time.Time, map[string]string, error) {
	ret := m.ctrl.Call(m, "GetLastData", accountRepo)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(map[string]string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLastData indicates an expected call of GetLastData
func (mr *MockPollTableMockRecorder) GetLastData(accountRepo interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastData", reflect.TypeOf((*MockPollTable)(nil).GetLastData), accountRepo)
}

// PollExists mocks base method
func (m *MockPollTable) PollExists(account, repo string) (bool, error) {
	ret := m.ctrl.Call(m, "PollExists", account, repo)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PollExists indicates an expected call of PollExists
func (mr *MockPollTableMockRecorder) PollExists(account, repo interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PollExists", reflect.TypeOf((*MockPollTable)(nil).PollExists), account, repo)
}

// GetAllPolls mocks base method
func (m *MockPollTable) GetAllPolls() ([]*pb.PollRequest, error) {
	ret := m.ctrl.Call(m, "GetAllPolls")
	ret0, _ := ret[0].([]*pb.PollRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPolls indicates an expected call of GetAllPolls
func (mr *MockPollTableMockRecorder) GetAllPolls() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPolls", reflect.TypeOf((*MockPollTable)(nil).GetAllPolls))
}

// DeletePoll mocks base method
func (m *MockPollTable) DeletePoll(account, repo string) error {
	ret := m.ctrl.Call(m, "DeletePoll", account, repo)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePoll indicates an expected call of DeletePoll
func (mr *MockPollTableMockRecorder) DeletePoll(account, repo interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePoll", reflect.TypeOf((*MockPollTable)(nil).DeletePoll), account, repo)
}

// MockCredTable is a mock of CredTable interface
type MockCredTable struct {
	ctrl     *gomock.Controller
	recorder *MockCredTableMockRecorder
}

// MockCredTableMockRecorder is the mock recorder for MockCredTable
type MockCredTableMockRecorder struct {
	mock *MockCredTable
}

// NewMockCredTable creates a new mock instance
func NewMockCredTable(ctrl *gomock.Controller) *MockCredTable {
	mock := &MockCredTable{ctrl: ctrl}
	mock.recorder = &MockCredTableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCredTable) EXPECT() *MockCredTableMockRecorder {
	return m.recorder
}

// InsertCred mocks base method
func (m *MockCredTable) InsertCred(credder pb.OcyCredder, overWriteOk bool) error {
	ret := m.ctrl.Call(m, "InsertCred", credder, overWriteOk)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertCred indicates an expected call of InsertCred
func (mr *MockCredTableMockRecorder) InsertCred(credder, overWriteOk interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertCred", reflect.TypeOf((*MockCredTable)(nil).InsertCred), credder, overWriteOk)
}

// RetrieveAllCreds mocks base method
func (m *MockCredTable) RetrieveAllCreds() ([]pb.OcyCredder, error) {
	ret := m.ctrl.Call(m, "RetrieveAllCreds")
	ret0, _ := ret[0].([]pb.OcyCredder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveAllCreds indicates an expected call of RetrieveAllCreds
func (mr *MockCredTableMockRecorder) RetrieveAllCreds() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveAllCreds", reflect.TypeOf((*MockCredTable)(nil).RetrieveAllCreds))
}

// RetrieveCreds mocks base method
func (m *MockCredTable) RetrieveCreds(credType pb.CredType) ([]pb.OcyCredder, error) {
	ret := m.ctrl.Call(m, "RetrieveCreds", credType)
	ret0, _ := ret[0].([]pb.OcyCredder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveCreds indicates an expected call of RetrieveCreds
func (mr *MockCredTableMockRecorder) RetrieveCreds(credType interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveCreds", reflect.TypeOf((*MockCredTable)(nil).RetrieveCreds), credType)
}

// RetrieveCred mocks base method
func (m *MockCredTable) RetrieveCred(subCredType pb.SubCredType, identifier, accountName string) (pb.OcyCredder, error) {
	ret := m.ctrl.Call(m, "RetrieveCred", subCredType, identifier, accountName)
	ret0, _ := ret[0].(pb.OcyCredder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveCred indicates an expected call of RetrieveCred
func (mr *MockCredTableMockRecorder) RetrieveCred(subCredType, identifier, accountName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveCred", reflect.TypeOf((*MockCredTable)(nil).RetrieveCred), subCredType, identifier, accountName)
}

// RetrieveCredBySubTypeAndAcct mocks base method
func (m *MockCredTable) RetrieveCredBySubTypeAndAcct(scredType pb.SubCredType, acctName string) ([]pb.OcyCredder, error) {
	ret := m.ctrl.Call(m, "RetrieveCredBySubTypeAndAcct", scredType, acctName)
	ret0, _ := ret[0].([]pb.OcyCredder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveCredBySubTypeAndAcct indicates an expected call of RetrieveCredBySubTypeAndAcct
func (mr *MockCredTableMockRecorder) RetrieveCredBySubTypeAndAcct(scredType, acctName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveCredBySubTypeAndAcct", reflect.TypeOf((*MockCredTable)(nil).RetrieveCredBySubTypeAndAcct), scredType, acctName)
}

// CredExists mocks base method
func (m *MockCredTable) CredExists(credder pb.OcyCredder) (bool, error) {
	ret := m.ctrl.Call(m, "CredExists", credder)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CredExists indicates an expected call of CredExists
func (mr *MockCredTableMockRecorder) CredExists(credder interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CredExists", reflect.TypeOf((*MockCredTable)(nil).CredExists), credder)
}

// UpdateCred mocks base method
func (m *MockCredTable) UpdateCred(credder pb.OcyCredder) error {
	ret := m.ctrl.Call(m, "UpdateCred", credder)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCred indicates an expected call of UpdateCred
func (mr *MockCredTableMockRecorder) UpdateCred(credder interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCred", reflect.TypeOf((*MockCredTable)(nil).UpdateCred), credder)
}

// DeleteCred mocks base method
func (m *MockCredTable) DeleteCred(credder pb.OcyCredder) error {
	ret := m.ctrl.Call(m, "DeleteCred", credder)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCred indicates an expected call of DeleteCred
func (mr *MockCredTableMockRecorder) DeleteCred(credder interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCred", reflect.TypeOf((*MockCredTable)(nil).DeleteCred), credder)
}

// GetVCSTypeFromAccount mocks base method
func (m *MockCredTable) GetVCSTypeFromAccount(account string) (pb.SubCredType, error) {
	ret := m.ctrl.Call(m, "GetVCSTypeFromAccount", account)
	ret0, _ := ret[0].(pb.SubCredType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVCSTypeFromAccount indicates an expected call of GetVCSTypeFromAccount
func (mr *MockCredTableMockRecorder) GetVCSTypeFromAccount(account interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVCSTypeFromAccount", reflect.TypeOf((*MockCredTable)(nil).GetVCSTypeFromAccount), account)
}

// MockSubscriptionsTable is a mock of SubscriptionsTable interface
type MockSubscriptionsTable struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionsTableMockRecorder
}

// MockSubscriptionsTableMockRecorder is the mock recorder for MockSubscriptionsTable
type MockSubscriptionsTableMockRecorder struct {
	mock *MockSubscriptionsTable
}

// NewMockSubscriptionsTable creates a new mock instance
func NewMockSubscriptionsTable(ctrl *gomock.Controller) *MockSubscriptionsTable {
	mock := &MockSubscriptionsTable{ctrl: ctrl}
	mock.recorder = &MockSubscriptionsTableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSubscriptionsTable) EXPECT() *MockSubscriptionsTableMockRecorder {
	return m.recorder
}

// InsertOrUpdateActiveSubscription mocks base method
func (m *MockSubscriptionsTable) InsertOrUpdateActiveSubscription(subscriptions *pb.ActiveSubscription) (int64, error) {
	ret := m.ctrl.Call(m, "InsertOrUpdateActiveSubscription", subscriptions)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertOrUpdateActiveSubscription indicates an expected call of InsertOrUpdateActiveSubscription
func (mr *MockSubscriptionsTableMockRecorder) InsertOrUpdateActiveSubscription(subscriptions interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrUpdateActiveSubscription", reflect.TypeOf((*MockSubscriptionsTable)(nil).InsertOrUpdateActiveSubscription), subscriptions)
}

// FindSubscribeesForRepo mocks base method
func (m *MockSubscriptionsTable) FindSubscribeesForRepo(acctRepo string, credType pb.SubCredType) ([]*pb.ActiveSubscription, error) {
	ret := m.ctrl.Call(m, "FindSubscribeesForRepo", acctRepo, credType)
	ret0, _ := ret[0].([]*pb.ActiveSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSubscribeesForRepo indicates an expected call of FindSubscribeesForRepo
func (mr *MockSubscriptionsTableMockRecorder) FindSubscribeesForRepo(acctRepo, credType interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSubscribeesForRepo", reflect.TypeOf((*MockSubscriptionsTable)(nil).FindSubscribeesForRepo), acctRepo, credType)
}

// GetActiveSubscriptionData mocks base method
func (m *MockSubscriptionsTable) GetActiveSubscriptionData(subscribingAcctRepo string, subscribingBuildId int64, subscribingVcsType pb.SubCredType) (*pb.SubscriptionUpstreamData, error) {
	ret := m.ctrl.Call(m, "GetActiveSubscriptionData", subscribingAcctRepo, subscribingBuildId, subscribingVcsType)
	ret0, _ := ret[0].(*pb.SubscriptionUpstreamData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveSubscriptionData indicates an expected call of GetActiveSubscriptionData
func (mr *MockSubscriptionsTableMockRecorder) GetActiveSubscriptionData(subscribingAcctRepo, subscribingBuildId, subscribingVcsType interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveSubscriptionData", reflect.TypeOf((*MockSubscriptionsTable)(nil).GetActiveSubscriptionData), subscribingAcctRepo, subscribingBuildId, subscribingVcsType)
}

// InsertSubscriptionData mocks base method
func (m *MockSubscriptionsTable) InsertSubscriptionData(upstreamBuildId, buildId, activeSubscriptionId int64) error {
	ret := m.ctrl.Call(m, "InsertSubscriptionData", upstreamBuildId, buildId, activeSubscriptionId)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertSubscriptionData indicates an expected call of InsertSubscriptionData
func (mr *MockSubscriptionsTableMockRecorder) InsertSubscriptionData(upstreamBuildId, buildId, activeSubscriptionId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertSubscriptionData", reflect.TypeOf((*MockSubscriptionsTable)(nil).InsertSubscriptionData), upstreamBuildId, buildId, activeSubscriptionId)
}

// MockHealthyChkr is a mock of HealthyChkr interface
type MockHealthyChkr struct {
	ctrl     *gomock.Controller
	recorder *MockHealthyChkrMockRecorder
}

// MockHealthyChkrMockRecorder is the mock recorder for MockHealthyChkr
type MockHealthyChkrMockRecorder struct {
	mock *MockHealthyChkr
}

// NewMockHealthyChkr creates a new mock instance
func NewMockHealthyChkr(ctrl *gomock.Controller) *MockHealthyChkr {
	mock := &MockHealthyChkr{ctrl: ctrl}
	mock.recorder = &MockHealthyChkrMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHealthyChkr) EXPECT() *MockHealthyChkrMockRecorder {
	return m.recorder
}

// Healthy mocks base method
func (m *MockHealthyChkr) Healthy() bool {
	ret := m.ctrl.Call(m, "Healthy")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Healthy indicates an expected call of Healthy
func (mr *MockHealthyChkrMockRecorder) Healthy() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Healthy", reflect.TypeOf((*MockHealthyChkr)(nil).Healthy))
}

// MockOcelotStorage is a mock of OcelotStorage interface
type MockOcelotStorage struct {
	ctrl     *gomock.Controller
	recorder *MockOcelotStorageMockRecorder
}

// MockOcelotStorageMockRecorder is the mock recorder for MockOcelotStorage
type MockOcelotStorageMockRecorder struct {
	mock *MockOcelotStorage
}

// NewMockOcelotStorage creates a new mock instance
func NewMockOcelotStorage(ctrl *gomock.Controller) *MockOcelotStorage {
	mock := &MockOcelotStorage{ctrl: ctrl}
	mock.recorder = &MockOcelotStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOcelotStorage) EXPECT() *MockOcelotStorageMockRecorder {
	return m.recorder
}

// AddOut mocks base method
func (m *MockOcelotStorage) AddOut(output *models.BuildOutput) error {
	ret := m.ctrl.Call(m, "AddOut", output)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOut indicates an expected call of AddOut
func (mr *MockOcelotStorageMockRecorder) AddOut(output interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOut", reflect.TypeOf((*MockOcelotStorage)(nil).AddOut), output)
}

// RetrieveOut mocks base method
func (m *MockOcelotStorage) RetrieveOut(buildId int64) (models.BuildOutput, error) {
	ret := m.ctrl.Call(m, "RetrieveOut", buildId)
	ret0, _ := ret[0].(models.BuildOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveOut indicates an expected call of RetrieveOut
func (mr *MockOcelotStorageMockRecorder) RetrieveOut(buildId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveOut", reflect.TypeOf((*MockOcelotStorage)(nil).RetrieveOut), buildId)
}

// RetrieveLastOutByHash mocks base method
func (m *MockOcelotStorage) RetrieveLastOutByHash(gitHash string) (models.BuildOutput, error) {
	ret := m.ctrl.Call(m, "RetrieveLastOutByHash", gitHash)
	ret0, _ := ret[0].(models.BuildOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveLastOutByHash indicates an expected call of RetrieveLastOutByHash
func (mr *MockOcelotStorageMockRecorder) RetrieveLastOutByHash(gitHash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveLastOutByHash", reflect.TypeOf((*MockOcelotStorage)(nil).RetrieveLastOutByHash), gitHash)
}

// AddSumStart mocks base method
func (m *MockOcelotStorage) AddSumStart(hash, account, repo, branch string, by pb.SignaledBy, credId int64) (int64, error) {
	ret := m.ctrl.Call(m, "AddSumStart", hash, account, repo, branch, by, credId)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSumStart indicates an expected call of AddSumStart
func (mr *MockOcelotStorageMockRecorder) AddSumStart(hash, account, repo, branch, by, credId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSumStart", reflect.TypeOf((*MockOcelotStorage)(nil).AddSumStart), hash, account, repo, branch, by, credId)
}

// UpdateSum mocks base method
func (m *MockOcelotStorage) UpdateSum(failed bool, duration float64, id int64) error {
	ret := m.ctrl.Call(m, "UpdateSum", failed, duration, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSum indicates an expected call of UpdateSum
func (mr *MockOcelotStorageMockRecorder) UpdateSum(failed, duration, id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSum", reflect.TypeOf((*MockOcelotStorage)(nil).UpdateSum), failed, duration, id)
}

// RetrieveSumByBuildId mocks base method
func (m *MockOcelotStorage) RetrieveSumByBuildId(buildId int64) (*pb.BuildSummary, error) {
	ret := m.ctrl.Call(m, "RetrieveSumByBuildId", buildId)
	ret0, _ := ret[0].(*pb.BuildSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveSumByBuildId indicates an expected call of RetrieveSumByBuildId
func (mr *MockOcelotStorageMockRecorder) RetrieveSumByBuildId(buildId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveSumByBuildId", reflect.TypeOf((*MockOcelotStorage)(nil).RetrieveSumByBuildId), buildId)
}

// RetrieveSum mocks base method
func (m *MockOcelotStorage) RetrieveSum(gitHash string) ([]*pb.BuildSummary, error) {
	ret := m.ctrl.Call(m, "RetrieveSum", gitHash)
	ret0, _ := ret[0].([]*pb.BuildSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveSum indicates an expected call of RetrieveSum
func (mr *MockOcelotStorageMockRecorder) RetrieveSum(gitHash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveSum", reflect.TypeOf((*MockOcelotStorage)(nil).RetrieveSum), gitHash)
}

// RetrieveLatestSum mocks base method
func (m *MockOcelotStorage) RetrieveLatestSum(gitHash string) (*pb.BuildSummary, error) {
	ret := m.ctrl.Call(m, "RetrieveLatestSum", gitHash)
	ret0, _ := ret[0].(*pb.BuildSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveLatestSum indicates an expected call of RetrieveLatestSum
func (mr *MockOcelotStorageMockRecorder) RetrieveLatestSum(gitHash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveLatestSum", reflect.TypeOf((*MockOcelotStorage)(nil).RetrieveLatestSum), gitHash)
}

// RetrieveHashStartsWith mocks base method
func (m *MockOcelotStorage) RetrieveHashStartsWith(partialGitHash string) ([]*pb.BuildSummary, error) {
	ret := m.ctrl.Call(m, "RetrieveHashStartsWith", partialGitHash)
	ret0, _ := ret[0].([]*pb.BuildSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveHashStartsWith indicates an expected call of RetrieveHashStartsWith
func (mr *MockOcelotStorageMockRecorder) RetrieveHashStartsWith(partialGitHash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveHashStartsWith", reflect.TypeOf((*MockOcelotStorage)(nil).RetrieveHashStartsWith), partialGitHash)
}

// RetrieveLastFewSums mocks base method
func (m *MockOcelotStorage) RetrieveLastFewSums(repo, account string, limit int32) ([]*pb.BuildSummary, error) {
	ret := m.ctrl.Call(m, "RetrieveLastFewSums", repo, account, limit)
	ret0, _ := ret[0].([]*pb.BuildSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveLastFewSums indicates an expected call of RetrieveLastFewSums
func (mr *MockOcelotStorageMockRecorder) RetrieveLastFewSums(repo, account, limit interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveLastFewSums", reflect.TypeOf((*MockOcelotStorage)(nil).RetrieveLastFewSums), repo, account, limit)
}

// RetrieveAcctRepo mocks base method
func (m *MockOcelotStorage) RetrieveAcctRepo(partialRepo string) ([]*pb.BuildSummary, error) {
	ret := m.ctrl.Call(m, "RetrieveAcctRepo", partialRepo)
	ret0, _ := ret[0].([]*pb.BuildSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveAcctRepo indicates an expected call of RetrieveAcctRepo
func (mr *MockOcelotStorageMockRecorder) RetrieveAcctRepo(partialRepo interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveAcctRepo", reflect.TypeOf((*MockOcelotStorage)(nil).RetrieveAcctRepo), partialRepo)
}

// StartBuild mocks base method
func (m *MockOcelotStorage) StartBuild(id int64) error {
	ret := m.ctrl.Call(m, "StartBuild", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartBuild indicates an expected call of StartBuild
func (mr *MockOcelotStorageMockRecorder) StartBuild(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartBuild", reflect.TypeOf((*MockOcelotStorage)(nil).StartBuild), id)
}

// StoreFailedValidation mocks base method
func (m *MockOcelotStorage) StoreFailedValidation(id int64) error {
	ret := m.ctrl.Call(m, "StoreFailedValidation", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreFailedValidation indicates an expected call of StoreFailedValidation
func (mr *MockOcelotStorageMockRecorder) StoreFailedValidation(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreFailedValidation", reflect.TypeOf((*MockOcelotStorage)(nil).StoreFailedValidation), id)
}

// SetQueueTime mocks base method
func (m *MockOcelotStorage) SetQueueTime(id int64) error {
	ret := m.ctrl.Call(m, "SetQueueTime", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetQueueTime indicates an expected call of SetQueueTime
func (mr *MockOcelotStorageMockRecorder) SetQueueTime(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetQueueTime", reflect.TypeOf((*MockOcelotStorage)(nil).SetQueueTime), id)
}

// GetTrackedRepos mocks base method
func (m *MockOcelotStorage) GetTrackedRepos() (*pb.AcctRepos, error) {
	ret := m.ctrl.Call(m, "GetTrackedRepos")
	ret0, _ := ret[0].(*pb.AcctRepos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrackedRepos indicates an expected call of GetTrackedRepos
func (mr *MockOcelotStorageMockRecorder) GetTrackedRepos() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrackedRepos", reflect.TypeOf((*MockOcelotStorage)(nil).GetTrackedRepos))
}

// GetLastSuccessfulBuildHash mocks base method
func (m *MockOcelotStorage) GetLastSuccessfulBuildHash(account, repo, branch string) (string, error) {
	ret := m.ctrl.Call(m, "GetLastSuccessfulBuildHash", account, repo, branch)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastSuccessfulBuildHash indicates an expected call of GetLastSuccessfulBuildHash
func (mr *MockOcelotStorageMockRecorder) GetLastSuccessfulBuildHash(account, repo, branch interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastSuccessfulBuildHash", reflect.TypeOf((*MockOcelotStorage)(nil).GetLastSuccessfulBuildHash), account, repo, branch)
}

// AddStageDetail mocks base method
func (m *MockOcelotStorage) AddStageDetail(stageResult *models.StageResult) error {
	ret := m.ctrl.Call(m, "AddStageDetail", stageResult)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddStageDetail indicates an expected call of AddStageDetail
func (mr *MockOcelotStorageMockRecorder) AddStageDetail(stageResult interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStageDetail", reflect.TypeOf((*MockOcelotStorage)(nil).AddStageDetail), stageResult)
}

// RetrieveStageDetail mocks base method
func (m *MockOcelotStorage) RetrieveStageDetail(buildId int64) ([]models.StageResult, error) {
	ret := m.ctrl.Call(m, "RetrieveStageDetail", buildId)
	ret0, _ := ret[0].([]models.StageResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveStageDetail indicates an expected call of RetrieveStageDetail
func (mr *MockOcelotStorageMockRecorder) RetrieveStageDetail(buildId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveStageDetail", reflect.TypeOf((*MockOcelotStorage)(nil).RetrieveStageDetail), buildId)
}

// StorageType mocks base method
func (m *MockOcelotStorage) StorageType() string {
	ret := m.ctrl.Call(m, "StorageType")
	ret0, _ := ret[0].(string)
	return ret0
}

// StorageType indicates an expected call of StorageType
func (mr *MockOcelotStorageMockRecorder) StorageType() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageType", reflect.TypeOf((*MockOcelotStorage)(nil).StorageType))
}

// InsertPoll mocks base method
func (m *MockOcelotStorage) InsertPoll(account, repo, cronString, branches string, credsId int64) error {
	ret := m.ctrl.Call(m, "InsertPoll", account, repo, cronString, branches, credsId)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertPoll indicates an expected call of InsertPoll
func (mr *MockOcelotStorageMockRecorder) InsertPoll(account, repo, cronString, branches, credsId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertPoll", reflect.TypeOf((*MockOcelotStorage)(nil).InsertPoll), account, repo, cronString, branches, credsId)
}

// UpdatePoll mocks base method
func (m *MockOcelotStorage) UpdatePoll(account, repo, cronString, branches string) error {
	ret := m.ctrl.Call(m, "UpdatePoll", account, repo, cronString, branches)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePoll indicates an expected call of UpdatePoll
func (mr *MockOcelotStorageMockRecorder) UpdatePoll(account, repo, cronString, branches interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePoll", reflect.TypeOf((*MockOcelotStorage)(nil).UpdatePoll), account, repo, cronString, branches)
}

// SetLastData mocks base method
func (m *MockOcelotStorage) SetLastData(account, repo string, lasthashes map[string]string) error {
	ret := m.ctrl.Call(m, "SetLastData", account, repo, lasthashes)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLastData indicates an expected call of SetLastData
func (mr *MockOcelotStorageMockRecorder) SetLastData(account, repo, lasthashes interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLastData", reflect.TypeOf((*MockOcelotStorage)(nil).SetLastData), account, repo, lasthashes)
}

// GetLastData mocks base method
func (m *MockOcelotStorage) GetLastData(accountRepo string) (time.Time, map[string]string, error) {
	ret := m.ctrl.Call(m, "GetLastData", accountRepo)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(map[string]string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLastData indicates an expected call of GetLastData
func (mr *MockOcelotStorageMockRecorder) GetLastData(accountRepo interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastData", reflect.TypeOf((*MockOcelotStorage)(nil).GetLastData), accountRepo)
}

// PollExists mocks base method
func (m *MockOcelotStorage) PollExists(account, repo string) (bool, error) {
	ret := m.ctrl.Call(m, "PollExists", account, repo)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PollExists indicates an expected call of PollExists
func (mr *MockOcelotStorageMockRecorder) PollExists(account, repo interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PollExists", reflect.TypeOf((*MockOcelotStorage)(nil).PollExists), account, repo)
}

// GetAllPolls mocks base method
func (m *MockOcelotStorage) GetAllPolls() ([]*pb.PollRequest, error) {
	ret := m.ctrl.Call(m, "GetAllPolls")
	ret0, _ := ret[0].([]*pb.PollRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPolls indicates an expected call of GetAllPolls
func (mr *MockOcelotStorageMockRecorder) GetAllPolls() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPolls", reflect.TypeOf((*MockOcelotStorage)(nil).GetAllPolls))
}

// DeletePoll mocks base method
func (m *MockOcelotStorage) DeletePoll(account, repo string) error {
	ret := m.ctrl.Call(m, "DeletePoll", account, repo)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePoll indicates an expected call of DeletePoll
func (mr *MockOcelotStorageMockRecorder) DeletePoll(account, repo interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePoll", reflect.TypeOf((*MockOcelotStorage)(nil).DeletePoll), account, repo)
}

// InsertCred mocks base method
func (m *MockOcelotStorage) InsertCred(credder pb.OcyCredder, overWriteOk bool) error {
	ret := m.ctrl.Call(m, "InsertCred", credder, overWriteOk)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertCred indicates an expected call of InsertCred
func (mr *MockOcelotStorageMockRecorder) InsertCred(credder, overWriteOk interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertCred", reflect.TypeOf((*MockOcelotStorage)(nil).InsertCred), credder, overWriteOk)
}

// RetrieveAllCreds mocks base method
func (m *MockOcelotStorage) RetrieveAllCreds() ([]pb.OcyCredder, error) {
	ret := m.ctrl.Call(m, "RetrieveAllCreds")
	ret0, _ := ret[0].([]pb.OcyCredder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveAllCreds indicates an expected call of RetrieveAllCreds
func (mr *MockOcelotStorageMockRecorder) RetrieveAllCreds() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveAllCreds", reflect.TypeOf((*MockOcelotStorage)(nil).RetrieveAllCreds))
}

// RetrieveCreds mocks base method
func (m *MockOcelotStorage) RetrieveCreds(credType pb.CredType) ([]pb.OcyCredder, error) {
	ret := m.ctrl.Call(m, "RetrieveCreds", credType)
	ret0, _ := ret[0].([]pb.OcyCredder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveCreds indicates an expected call of RetrieveCreds
func (mr *MockOcelotStorageMockRecorder) RetrieveCreds(credType interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveCreds", reflect.TypeOf((*MockOcelotStorage)(nil).RetrieveCreds), credType)
}

// RetrieveCred mocks base method
func (m *MockOcelotStorage) RetrieveCred(subCredType pb.SubCredType, identifier, accountName string) (pb.OcyCredder, error) {
	ret := m.ctrl.Call(m, "RetrieveCred", subCredType, identifier, accountName)
	ret0, _ := ret[0].(pb.OcyCredder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveCred indicates an expected call of RetrieveCred
func (mr *MockOcelotStorageMockRecorder) RetrieveCred(subCredType, identifier, accountName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveCred", reflect.TypeOf((*MockOcelotStorage)(nil).RetrieveCred), subCredType, identifier, accountName)
}

// RetrieveCredBySubTypeAndAcct mocks base method
func (m *MockOcelotStorage) RetrieveCredBySubTypeAndAcct(scredType pb.SubCredType, acctName string) ([]pb.OcyCredder, error) {
	ret := m.ctrl.Call(m, "RetrieveCredBySubTypeAndAcct", scredType, acctName)
	ret0, _ := ret[0].([]pb.OcyCredder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveCredBySubTypeAndAcct indicates an expected call of RetrieveCredBySubTypeAndAcct
func (mr *MockOcelotStorageMockRecorder) RetrieveCredBySubTypeAndAcct(scredType, acctName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveCredBySubTypeAndAcct", reflect.TypeOf((*MockOcelotStorage)(nil).RetrieveCredBySubTypeAndAcct), scredType, acctName)
}

// CredExists mocks base method
func (m *MockOcelotStorage) CredExists(credder pb.OcyCredder) (bool, error) {
	ret := m.ctrl.Call(m, "CredExists", credder)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CredExists indicates an expected call of CredExists
func (mr *MockOcelotStorageMockRecorder) CredExists(credder interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CredExists", reflect.TypeOf((*MockOcelotStorage)(nil).CredExists), credder)
}

// UpdateCred mocks base method
func (m *MockOcelotStorage) UpdateCred(credder pb.OcyCredder) error {
	ret := m.ctrl.Call(m, "UpdateCred", credder)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCred indicates an expected call of UpdateCred
func (mr *MockOcelotStorageMockRecorder) UpdateCred(credder interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCred", reflect.TypeOf((*MockOcelotStorage)(nil).UpdateCred), credder)
}

// DeleteCred mocks base method
func (m *MockOcelotStorage) DeleteCred(credder pb.OcyCredder) error {
	ret := m.ctrl.Call(m, "DeleteCred", credder)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCred indicates an expected call of DeleteCred
func (mr *MockOcelotStorageMockRecorder) DeleteCred(credder interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCred", reflect.TypeOf((*MockOcelotStorage)(nil).DeleteCred), credder)
}

// GetVCSTypeFromAccount mocks base method
func (m *MockOcelotStorage) GetVCSTypeFromAccount(account string) (pb.SubCredType, error) {
	ret := m.ctrl.Call(m, "GetVCSTypeFromAccount", account)
	ret0, _ := ret[0].(pb.SubCredType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVCSTypeFromAccount indicates an expected call of GetVCSTypeFromAccount
func (mr *MockOcelotStorageMockRecorder) GetVCSTypeFromAccount(account interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVCSTypeFromAccount", reflect.TypeOf((*MockOcelotStorage)(nil).GetVCSTypeFromAccount), account)
}

// InsertOrUpdateActiveSubscription mocks base method
func (m *MockOcelotStorage) InsertOrUpdateActiveSubscription(subscriptions *pb.ActiveSubscription) (int64, error) {
	ret := m.ctrl.Call(m, "InsertOrUpdateActiveSubscription", subscriptions)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertOrUpdateActiveSubscription indicates an expected call of InsertOrUpdateActiveSubscription
func (mr *MockOcelotStorageMockRecorder) InsertOrUpdateActiveSubscription(subscriptions interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrUpdateActiveSubscription", reflect.TypeOf((*MockOcelotStorage)(nil).InsertOrUpdateActiveSubscription), subscriptions)
}

// FindSubscribeesForRepo mocks base method
func (m *MockOcelotStorage) FindSubscribeesForRepo(acctRepo string, credType pb.SubCredType) ([]*pb.ActiveSubscription, error) {
	ret := m.ctrl.Call(m, "FindSubscribeesForRepo", acctRepo, credType)
	ret0, _ := ret[0].([]*pb.ActiveSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSubscribeesForRepo indicates an expected call of FindSubscribeesForRepo
func (mr *MockOcelotStorageMockRecorder) FindSubscribeesForRepo(acctRepo, credType interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSubscribeesForRepo", reflect.TypeOf((*MockOcelotStorage)(nil).FindSubscribeesForRepo), acctRepo, credType)
}

// GetActiveSubscriptionData mocks base method
func (m *MockOcelotStorage) GetActiveSubscriptionData(subscribingAcctRepo string, subscribingBuildId int64, subscribingVcsType pb.SubCredType) (*pb.SubscriptionUpstreamData, error) {
	ret := m.ctrl.Call(m, "GetActiveSubscriptionData", subscribingAcctRepo, subscribingBuildId, subscribingVcsType)
	ret0, _ := ret[0].(*pb.SubscriptionUpstreamData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveSubscriptionData indicates an expected call of GetActiveSubscriptionData
func (mr *MockOcelotStorageMockRecorder) GetActiveSubscriptionData(subscribingAcctRepo, subscribingBuildId, subscribingVcsType interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveSubscriptionData", reflect.TypeOf((*MockOcelotStorage)(nil).GetActiveSubscriptionData), subscribingAcctRepo, subscribingBuildId, subscribingVcsType)
}

// InsertSubscriptionData mocks base method
func (m *MockOcelotStorage) InsertSubscriptionData(upstreamBuildId, buildId, activeSubscriptionId int64) error {
	ret := m.ctrl.Call(m, "InsertSubscriptionData", upstreamBuildId, buildId, activeSubscriptionId)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertSubscriptionData indicates an expected call of InsertSubscriptionData
func (mr *MockOcelotStorageMockRecorder) InsertSubscriptionData(upstreamBuildId, buildId, activeSubscriptionId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertSubscriptionData", reflect.TypeOf((*MockOcelotStorage)(nil).InsertSubscriptionData), upstreamBuildId, buildId, activeSubscriptionId)
}

// Healthy mocks base method
func (m *MockOcelotStorage) Healthy() bool {
	ret := m.ctrl.Call(m, "Healthy")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Healthy indicates an expected call of Healthy
func (mr *MockOcelotStorageMockRecorder) Healthy() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Healthy", reflect.TypeOf((*MockOcelotStorage)(nil).Healthy))
}

// Close mocks base method
func (m *MockOcelotStorage) Close() {
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockOcelotStorageMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockOcelotStorage)(nil).Close))
}
