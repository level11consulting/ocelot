---
- hosts: all
  tasks:
  - name: Install common tools
    become: yes
    package:
      state: present
      name: "{{ item }}"
    loop:
      - build-essential
      - docker-compose
      - unzip
      - vim
      - python-pip
      - zip

  # FIXME: This should be split up to use get_url first, for checksum verification
  # https://learn.hashicorp.com/vault/operations/ops-deployment-guide
  - name: Download our Hashicorp dependencies
    vars:
      consul:
        version: 1.2.3
      vault:
        version: 0.11.1
    become: yes
    unarchive:
      src: "{{ item.url }}"
      dest: /usr/local/bin 
      creates: "{{ item.filepath }}"
      remote_src: yes
    loop:
      - url: "https://releases.hashicorp.com/consul/{{ consul.version }}/consul_{{ consul.version }}_linux_amd64.zip"
        filepath: /usr/local/bin/consul
      - url: "https://releases.hashicorp.com/vault/{{ vault.version }}/vault_{{ vault.version }}_linux_amd64.zip"
        filepath: /usr/local/bin/vault 

  # FIXME: Need to figure out what I can use to skip this if it doesn't need to be run.
  #- name: Install vault auto-complete
  #  shell: vault -autocomplete-install

# This is going to make assumptions about where ocelot is installed, so we can get docker-compose files
- hosts: infra
  tasks:
  - name: Install docker python modules
    pip:
      name: docker
      state: present
  - name: Create Ocelot docker network
    docker_network:
      name: ocelot

  - name: Start postgres
    docker_service:
      state: present
      project_src: ./go/src/github.com/level11consulting/ocelot/deploy/infra
      files:
        - postgres-docker-compose.yml

  - name: Start NSQ services
    docker_service:
      state: present
      project_src: ./go/src/github.com/level11consulting/ocelot/deploy/infra
      files:
        - nsq-docker-compose.yml

  - name: Start Consul
    docker_service:
      state: present
      project_src: ./go/src/github.com/level11consulting/ocelot/deploy/infra
      files:
        - consul-docker-compose.yml

  - name: Start Vault
    docker_service:
      state: present
      project_src: ./go/src/github.com/level11consulting/ocelot/deploy/infra
      files:
        - vault-docker-compose.yml

- hosts: ocelot
  tasks:
  # FIXME: In Ansible 2.8, there will be a module for snap packages
  - name: Install golang
    become: yes
    command: snap install go --classic
    args:
      creates: /snap/bin/go

    
  # FIXME: In Ansible 2.8, there will be a module for snap packages
  - name: Install Protobuf 
    become: yes
    command: snap install protobuf --classic
    args:
      creates: /snap/bin/protoc

  - name: Add Ocelot related environment variables into global bashrc
    vars:
      path: $PATH:$GOPATH/bin
      go:
        path: $HOME/go
        use_modules: "on" # Beware. Unquoted, and this evaluates to "True"
      vault:
        addr: http://192.168.56.78:8200
        token: ocelotdev
      consul:
        http_addr: http://192.168.56.78:8500
        host: 192.168.56.78
      nsq:
        lookupd_ip: 192.168.56.78
        nsqd_ip: 192.168.56.78
        nsqadmin:
      ocelot:
        register_ip: 192.168.12.34
        log_level: debug
        dbhost: 192.168.56.78
        admin_host: 192.168.12.34
        admin_port: 10000
    become: yes
    blockinfile:
      path: /etc/bash.bashrc
      block: |
        export {{ item.env_var }}={{ item.value }}
      marker: "# {mark} ANSIBLE MANAGED BLOCK ${{ item.env_var }}"
    loop:
      - env_var: "GOPATH"
        value: "{{ go.path }}"
      - env_var: "GO111MODULE"
        value: "{{ go.use_modules }}"
      - env_var: "PATH"
        value: "{{ path }}"
      - env_var: "VAULT_TOKEN"
        value: "{{ vault.token }}"
      - env_var: "VAULT_ADDR"
        value: "{{ vault.addr }}"
      - env_var: "CONSUL_HTTP_ADDR"
        value: "{{ consul.http_addr }}"
      - env_var: "CONSUL_HOST"
        value: "{{ consul.host }}"
      - env_var: "NSQLOOKUPD_IP"
        value: "{{ nsq.lookupd_ip }}"
      - env_var: "NSQD_IP"
        value: "{{ nsq.nsqd_ip }}"
      - env_var: "REGISTER_IP"
        value: "{{ ocelot.register_ip }}"
      - env_var: "LOG_LEVEL"
        value: "{{ ocelot.log_level }}"
      - env_var: "DBHOST"
        value: "{{ ocelot.dbhost }}"
      - env_var: "ADMIN_HOST"
        value: "{{ ocelot.admin_host }}"
      - env_var: "ADMIN_PORT"
        value: "{{ ocelot.admin_port }}"

    # FIXME: Can this be idempotent? Right now it might lose existing secrets on re-run
    # NOTE: This is using shell module, so it can use the new environment vars
  - name: Reconfigure Vault to use kv v1
    vars:
      vault:
        addr: http://192.168.56.78:8200
        token: ocelotdev
    shell: |
      {{ item }}
    args:
      executable: /bin/bash
    loop:
      - "VAULT_ADDR={{ vault.addr }} VAULT_TOKEN={{ vault.token}} vault secrets disable secret"
      - "VAULT_ADDR={{ vault.addr }} VAULT_TOKEN={{ vault.token}} vault secrets enable -path=secret -version=1 kv"

   # TODO
   # This is the place where setup-cv.sh is called
  - name: Run script for initializing Consul + Vault
    shell: |
      export CONSUL_HTTP_ADDR=http://192.168.56.78:8500
      export VAULT_ADDR=http://192.168.56.78:8200
      export VAULT_TOKEN=ocelotdev
      export DBHOST=192.168.56.78
      ./setup-cv.sh
    args:
      executable: /bin/bash
      chdir: /home/vagrant/go/src/github.com/level11consulting/ocelot/scripts

  - name: The following `go mod tidy` will fail w/o creating the $GOPATH/pkg directory... do that.
    become: yes
    file:
      path: /home/vagrant/go/pkg
      state: directory
      owner: vagrant
      group: vagrant

  - name: Install Ocelot's go dependencies (may take a moment...)
    retries: 2
    shell: |
      export GOPATH=/home/vagrant/go
      export GO111MODULE=on
      export PATH=$PATH:/snap/bin:$GOPATH/bin
      go mod tidy
    args:
      chdir: ./go/src/github.com/level11consulting/ocelot
      executable: /bin/bash

  - name: Ocelot build dependency - protoc-gen-go
    become: yes
    shell: |
      export GOPATH=/home/vagrant/go
      export PATH=$PATH:/snap/bin:$GOPATH/bin
      go get -v -u {{ item }}
    args:
      executable: /bin/bash
      creates: /home/vagrant/go/bin/protoc-gen-go
    loop:
      - github.com/golang/protobuf/proto
      - github.com/golang/protobuf/protoc-gen-go

  - name: Ocelot build dependency - protoc-gen-grpc-gateway
    become: yes
    shell: |
      export GOPATH=/home/vagrant/go
      export PATH=$PATH:/snap/bin:$GOPATH/bin
      go get -v -u {{ item }}
    args:
      executable: /bin/bash
      creates: /home/vagrant/go/bin/protoc-gen-grpc-gateway
    loop:
      - github.com/grpc-ecosystem/grpc-gateway/protoc-gen-grpc-gateway


  - name: Ocelot build dependency - protoc-gen-swagger
    become: yes
    shell: |
      export GOPATH=/home/vagrant/go
      export PATH=$PATH:/snap/bin:$GOPATH/bin
      go get -v -u {{ item }}
    args:
      executable: /bin/bash
      creates: /home/vagrant/go/bin/protoc-gen-swagger
    loop:
      - github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger

  - name: Ocelot build dependency - protoc-go-inject-tag
    become: yes
    shell: |
      export GOPATH=/home/vagrant/go
      export PATH=$PATH:/snap/bin:$GOPATH/bin
      go get -v -u {{ item }}
    args:
      executable: /bin/bash
      creates: /home/vagrant/go/bin/protoc-go-inject-tag
    loop:
      - github.com/favadi/protoc-go-inject-tag

  - name: Ocelot build dependency - mockgen
    become: yes
    shell: |
      export GOPATH=/home/vagrant/go
      export PATH=$PATH:/snap/bin:$GOPATH/bin
      go get -v -u {{ item }}
    args:
      executable: /bin/bash
      creates: /home/vagrant/go/bin/mockgen
    loop:
      - github.com/golang/mock/mockgen

  - name: Ocelot build dependency - stringer
    become: yes
    shell: |
      export GOPATH=/home/vagrant/go
      export PATH=$PATH:/snap/bin:$GOPATH/bin
      go get -v -u {{ item }}
    args:
      executable: /bin/bash
      creates: /home/vagrant/go/bin/stringer
    loop:
      - golang.org/x/tools/cmd/stringer

  - name: Ocelot build dependency - cover
    become: yes
    shell: |
      export GOPATH=/home/vagrant/go
      export PATH=$PATH:/snap/bin:$GOPATH/bin
      go get -v -u {{ item }}
    args:
      executable: /bin/bash
      creates: /home/vagrant/go/bin/cover
    loop:
      - golang.org/x/tools/cmd/cover

  - name: Run code generation
    shell: |
      export GOPATH=/home/vagrant/go
      export PATH=$PATH:/snap/bin:$GOPATH/bin
      make proto
    args:
      chdir: /home/vagrant/go/src/github.com/level11consulting/ocelot

  # XXX: Do we really need to run this as root?
  - name: Run local compile, and install locally
    become: yes
    shell: |
      export GOPATH=/home/vagrant/go
      export GO111MODULE=on
      export PATH=$PATH:/snap/bin:$GOPATH/bin
      make local
    args:
      chdir: /home/vagrant/go/src/github.com/level11consulting/ocelot
