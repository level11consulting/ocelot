syntax = "proto3";
package credential;

import "state.proto";


// TODO: Thinking about renaming this package "secret" or something along those lines

enum SecretType {
    SECRET_TYPE_UNSPECIFIED = 0;
    BASIC_AUTH = 1;
    API_KEY = 2;
    ENV_VAR = 3;
    FILE = 4;
    SSH_PEM = 5;
    DOCKER_REGISTRY = 6;
    NPM_REPO = 7;
    PYPI_REGISTRY = 8;
    MAVEN_REPO = 9;
    KUBERNETES = 10;
}

// Server returns SecretEntry as response
message SecretCreateRequest {
    string org = 1;
    SecretType secret_type = 2;
    string secret = 3;
}

message SecretEntry {
    int32 id = 1;
    int32 org_id = 2;
    SecretType secret_type = 3;
    state.ActiveState active_state = 4;
}

// Server returns SecretEntry as response
message SecretDeleteRequest {
    string org = 1;
    SecretType secret_type = 2;
}

// Server returns SecretEntry as response
message SecretUpdateRequest {
    string org = 1;
    SecretType secret_type = 2;
    string secret = 3;
    state.ActiveState active_state = 4;
}

// Server returns SecretListResponse
message SecretListRequest {
    string org = 1;
    SecretType secret_type = 2;
}

message SecretListResponse {
    repeated SecretEntry secret_integreation_entries = 1;
}


// VCS Credentials allow OrbitalCI to clone and download code for test and deployment
// Currently supported VCS types:
//    * Bitbucket
//    * GITHUB

enum VcsType {
    VCS_TYPE_UNSPECIFIED = 0;
    BITBUCKET = 1;
    GITHUB = 2;
    // GITLAB = 3;
    // GITTEA = 4;
}

// TODO: VCS message type, organization message type

// Server returns VcsCredEntry as response
message VcsCredCreateRequest {
    string org = 1;
    VcsType vcs_type = 2;
    string secret = 3;
}

message VcsCredEntry {
    int32 id = 1;
    int32 org_id = 2;
    VcsType vcs_type = 3;
    state.ActiveState active_state = 4;
}

// Server returns VcsCredEntry as response
message VcsCredDeleteRequest {
    string org = 1;
    string name = 2;
    bool force = 3;
}

// Server returns VcsCredEntry as response
message VcsCredUpdateRequest {
    string org = 1;
    string name = 2;
    string secret = 3;
    state.ActiveState active_state = 4;
}

// Server returns VcsCredListResponse as response
message VcsCredListRequest {
    string org = 1;
    VcsType vcs_type = 2;
}

message VcsCredListResponse {
    repeated VcsCredEntry vcs_cred_entries = 1;
}

service CredentialService {
    rpc CreateSecret(SecretCreateRequest) returns (SecretEntry);
    rpc DeleteSecret(SecretDeleteRequest) returns (SecretEntry);
    rpc UpdateSecret(SecretUpdateRequest) returns (SecretEntry);
    rpc ListSecret(SecretListRequest) returns (SecretListResponse);
    rpc CreateVcsCred(VcsCredCreateRequest) returns (VcsCredEntry);
    rpc DeleteVcsCred(VcsCredDeleteRequest) returns (VcsCredEntry);
    rpc UpdateVcsCred(VcsCredUpdateRequest) returns (VcsCredEntry);
    rpc ListVcsCreds(VcsCredListRequest) returns (VcsCredListResponse);
}