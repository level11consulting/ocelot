syntax = "proto3";
package code;

import "orbital_types.proto";
import "secret.proto";

/// Code repository

message GitRepoEntry {
    string org = 1;
    string git_provider = 2;
    string name = 3;
    string user = 4;
    string uri = 5;
    orbital_types.SecretType secret_type = 6;
    string auth_data = 7;
    orbital_types.ActiveState build = 8;
    orbital_types.ActiveState notify = 9;
    int32 next_build_index = 10;
    GitRepoRemoteBranchHeadList remote_branch_head_refs = 11;

}

message GitRepoAddRequest {
    string org = 1;
    string git_provider = 2;
    string name = 3;
    string user = 4;
    string uri = 5;
    orbital_types.SecretType secret_type = 6;
    string auth_data = 7;
    bool skip_check = 8;
    string alt_check_branch = 9;
    GitRepoRemoteBranchHeadList remote_branch_head_refs = 10;
}

message GitRepoGetRequest {
    string org = 1;
    string git_provider = 2;
    string name = 3;
    string user = 4;
    string uri = 5;
}

message GitRepoUpdateRequest {
    string org = 1;
    string git_provider = 2;
    string name = 3;
    string user = 4;
    string uri = 5;
    orbital_types.SecretType secret_type = 6;
    orbital_types.ActiveState build = 7;
    orbital_types.ActiveState notify = 8;
    string auth_data = 9;
    GitRepoRemoteBranchHeadList remote_branch_head_refs = 10;
}

message GitRepoRemoveRequest {
    string org = 1;
    string git_provider = 2;
    string name = 3;
    string user = 4;
    string uri = 5;
    bool force = 6;
}

message GitRepoListRequest {
    string org = 1;
    string git_provider = 2;
}

message GitRepoListResponse {
    repeated GitRepoEntry git_repos = 1;
}

message GitRepoRemoteBranchHead {
   string branch = 1;
   string commit = 2; 
}

message GitRepoRemoteBranchHeadList {
    repeated GitRepoRemoteBranchHead remote_branch_head_refs = 1;
}

service CodeService {
    //rpc GitProviderAdd(GitProviderAddRequest) returns (GitProviderEntry);
    //rpc GitProviderGet(GitProviderGetRequest) returns (GitProviderEntry);
    //rpc GitProviderUpdate(GitProviderUpdateRequest) returns (GitProviderEntry);
    //rpc GitProviderRemove(GitProviderRemoveRequest) returns (GitProviderEntry);
    //rpc GitProviderList(GitProviderListRequest) returns (GitProviderListResponse);

    rpc GitRepoAdd(GitRepoAddRequest) returns (GitRepoEntry);
    rpc GitRepoGet(GitRepoGetRequest) returns (GitRepoEntry);
    rpc GitRepoUpdate(GitRepoUpdateRequest) returns (GitRepoEntry);
    rpc GitRepoRemove(GitRepoRemoveRequest) returns (GitRepoEntry);
    rpc GitRepoList(GitRepoListRequest) returns (GitRepoListResponse);

    // I think I still need things for polling.
    // They just don't need to be exposed to the user, or at least via config file
    //rpc AddRepoPollRule() returns ();
    //rpc GetRepoPollRule() returns ();
    //rpc UpdateRepoPollRule() returns ();
    //rpc DeleteRepoPollRule() returns ();
    //rpc ListRepoPollRule() returns ();
}