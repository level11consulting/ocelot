// Code generated by MockGen. DO NOT EDIT.
// Source: vcshandler.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	gomock "github.com/golang/mock/gomock"
	net "github.com/shankj3/go-til/net"
	pb "github.com/level11consulting/ocelot/models/pb"
	io "io"
	reflect "reflect"
)

// MockVCSHandler is a mock of VCSHandler interface
type MockVCSHandler struct {
	ctrl     *gomock.Controller
	recorder *MockVCSHandlerMockRecorder
}

// MockVCSHandlerMockRecorder is the mock recorder for MockVCSHandler
type MockVCSHandlerMockRecorder struct {
	mock *MockVCSHandler
}

// NewMockVCSHandler creates a new mock instance
func NewMockVCSHandler(ctrl *gomock.Controller) *MockVCSHandler {
	mock := &MockVCSHandler{ctrl: ctrl}
	mock.recorder = &MockVCSHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVCSHandler) EXPECT() *MockVCSHandlerMockRecorder {
	return m.recorder
}

// GetVcsType mocks base method
func (m *MockVCSHandler) GetVcsType() pb.SubCredType {
	ret := m.ctrl.Call(m, "GetVcsType")
	ret0, _ := ret[0].(pb.SubCredType)
	return ret0
}

// GetVcsType indicates an expected call of GetVcsType
func (mr *MockVCSHandlerMockRecorder) GetVcsType() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVcsType", reflect.TypeOf((*MockVCSHandler)(nil).GetVcsType))
}

// Walk mocks base method
func (m *MockVCSHandler) Walk() error {
	ret := m.ctrl.Call(m, "Walk")
	ret0, _ := ret[0].(error)
	return ret0
}

// Walk indicates an expected call of Walk
func (mr *MockVCSHandlerMockRecorder) Walk() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Walk", reflect.TypeOf((*MockVCSHandler)(nil).Walk))
}

// GetFile mocks base method
func (m *MockVCSHandler) GetFile(filePath, fullRepoName, commitHash string) ([]byte, error) {
	ret := m.ctrl.Call(m, "GetFile", filePath, fullRepoName, commitHash)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFile indicates an expected call of GetFile
func (mr *MockVCSHandlerMockRecorder) GetFile(filePath, fullRepoName, commitHash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFile", reflect.TypeOf((*MockVCSHandler)(nil).GetFile), filePath, fullRepoName, commitHash)
}

// CreateWebhook mocks base method
func (m *MockVCSHandler) CreateWebhook(webhookURL string) error {
	ret := m.ctrl.Call(m, "CreateWebhook", webhookURL)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWebhook indicates an expected call of CreateWebhook
func (mr *MockVCSHandlerMockRecorder) CreateWebhook(webhookURL interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWebhook", reflect.TypeOf((*MockVCSHandler)(nil).CreateWebhook), webhookURL)
}

// GetCallbackURL mocks base method
func (m *MockVCSHandler) GetCallbackURL() string {
	ret := m.ctrl.Call(m, "GetCallbackURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetCallbackURL indicates an expected call of GetCallbackURL
func (mr *MockVCSHandlerMockRecorder) GetCallbackURL() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCallbackURL", reflect.TypeOf((*MockVCSHandler)(nil).GetCallbackURL))
}

// SetCallbackURL mocks base method
func (m *MockVCSHandler) SetCallbackURL(callbackURL string) {
	m.ctrl.Call(m, "SetCallbackURL", callbackURL)
}

// SetCallbackURL indicates an expected call of SetCallbackURL
func (mr *MockVCSHandlerMockRecorder) SetCallbackURL(callbackURL interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCallbackURL", reflect.TypeOf((*MockVCSHandler)(nil).SetCallbackURL), callbackURL)
}

// SetBaseURL mocks base method
func (m *MockVCSHandler) SetBaseURL(baseURL string) {
	m.ctrl.Call(m, "SetBaseURL", baseURL)
}

// SetBaseURL indicates an expected call of SetBaseURL
func (mr *MockVCSHandlerMockRecorder) SetBaseURL(baseURL interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBaseURL", reflect.TypeOf((*MockVCSHandler)(nil).SetBaseURL), baseURL)
}

// GetBaseURL mocks base method
func (m *MockVCSHandler) GetBaseURL() string {
	ret := m.ctrl.Call(m, "GetBaseURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetBaseURL indicates an expected call of GetBaseURL
func (mr *MockVCSHandlerMockRecorder) GetBaseURL() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBaseURL", reflect.TypeOf((*MockVCSHandler)(nil).GetBaseURL))
}

// GetRepoLinks mocks base method
func (m *MockVCSHandler) GetRepoLinks(acctRepo string) (*pb.Links, error) {
	ret := m.ctrl.Call(m, "GetRepoLinks", acctRepo)
	ret0, _ := ret[0].(*pb.Links)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepoLinks indicates an expected call of GetRepoLinks
func (mr *MockVCSHandlerMockRecorder) GetRepoLinks(acctRepo interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepoLinks", reflect.TypeOf((*MockVCSHandler)(nil).GetRepoLinks), acctRepo)
}

// GetAllBranchesLastCommitData mocks base method
func (m *MockVCSHandler) GetAllBranchesLastCommitData(acctRepo string) ([]*pb.BranchHistory, error) {
	ret := m.ctrl.Call(m, "GetAllBranchesLastCommitData", acctRepo)
	ret0, _ := ret[0].([]*pb.BranchHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllBranchesLastCommitData indicates an expected call of GetAllBranchesLastCommitData
func (mr *MockVCSHandlerMockRecorder) GetAllBranchesLastCommitData(acctRepo interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBranchesLastCommitData", reflect.TypeOf((*MockVCSHandler)(nil).GetAllBranchesLastCommitData), acctRepo)
}

// GetCommit mocks base method
func (m *MockVCSHandler) GetCommit(acctRepo, hash string) (*pb.Commit, error) {
	ret := m.ctrl.Call(m, "GetCommit", acctRepo, hash)
	ret0, _ := ret[0].(*pb.Commit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommit indicates an expected call of GetCommit
func (mr *MockVCSHandlerMockRecorder) GetCommit(acctRepo, hash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommit", reflect.TypeOf((*MockVCSHandler)(nil).GetCommit), acctRepo, hash)
}

// GetBranchLastCommitData mocks base method
func (m *MockVCSHandler) GetBranchLastCommitData(acctRepo, branch string) (*pb.BranchHistory, error) {
	ret := m.ctrl.Call(m, "GetBranchLastCommitData", acctRepo, branch)
	ret0, _ := ret[0].(*pb.BranchHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBranchLastCommitData indicates an expected call of GetBranchLastCommitData
func (mr *MockVCSHandlerMockRecorder) GetBranchLastCommitData(acctRepo, branch interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBranchLastCommitData", reflect.TypeOf((*MockVCSHandler)(nil).GetBranchLastCommitData), acctRepo, branch)
}

// GetCommitLog mocks base method
func (m *MockVCSHandler) GetCommitLog(acctRepo, branch, lastHash string) ([]*pb.Commit, error) {
	ret := m.ctrl.Call(m, "GetCommitLog", acctRepo, branch, lastHash)
	ret0, _ := ret[0].([]*pb.Commit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommitLog indicates an expected call of GetCommitLog
func (mr *MockVCSHandlerMockRecorder) GetCommitLog(acctRepo, branch, lastHash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommitLog", reflect.TypeOf((*MockVCSHandler)(nil).GetCommitLog), acctRepo, branch, lastHash)
}

// GetChangedFiles mocks base method
func (m *MockVCSHandler) GetChangedFiles(acctRepo, latesthash, earliestHash string) ([]string, error) {
	ret := m.ctrl.Call(m, "GetChangedFiles", acctRepo, latesthash, earliestHash)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChangedFiles indicates an expected call of GetChangedFiles
func (mr *MockVCSHandlerMockRecorder) GetChangedFiles(acctRepo, latesthash, earliestHash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChangedFiles", reflect.TypeOf((*MockVCSHandler)(nil).GetChangedFiles), acctRepo, latesthash, earliestHash)
}

// PostPRComment mocks base method
func (m *MockVCSHandler) PostPRComment(acctRepo, prId, hash string, failed bool, buildId int64) error {
	ret := m.ctrl.Call(m, "PostPRComment", acctRepo, prId, hash, failed, buildId)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostPRComment indicates an expected call of PostPRComment
func (mr *MockVCSHandlerMockRecorder) PostPRComment(acctRepo, prId, hash, failed, buildId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostPRComment", reflect.TypeOf((*MockVCSHandler)(nil).PostPRComment), acctRepo, prId, hash, failed, buildId)
}

// GetClient mocks base method
func (m *MockVCSHandler) GetClient() net.HttpClient {
	ret := m.ctrl.Call(m, "GetClient")
	ret0, _ := ret[0].(net.HttpClient)
	return ret0
}

// GetClient indicates an expected call of GetClient
func (mr *MockVCSHandlerMockRecorder) GetClient() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockVCSHandler)(nil).GetClient))
}

// MockTranslator is a mock of Translator interface
type MockTranslator struct {
	ctrl     *gomock.Controller
	recorder *MockTranslatorMockRecorder
}

// MockTranslatorMockRecorder is the mock recorder for MockTranslator
type MockTranslatorMockRecorder struct {
	mock *MockTranslator
}

// NewMockTranslator creates a new mock instance
func NewMockTranslator(ctrl *gomock.Controller) *MockTranslator {
	mock := &MockTranslator{ctrl: ctrl}
	mock.recorder = &MockTranslatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTranslator) EXPECT() *MockTranslatorMockRecorder {
	return m.recorder
}

// TranslatePush mocks base method
func (m *MockTranslator) TranslatePush(reader io.Reader) (*pb.Push, error) {
	ret := m.ctrl.Call(m, "TranslatePush", reader)
	ret0, _ := ret[0].(*pb.Push)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TranslatePush indicates an expected call of TranslatePush
func (mr *MockTranslatorMockRecorder) TranslatePush(reader interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranslatePush", reflect.TypeOf((*MockTranslator)(nil).TranslatePush), reader)
}

// TranslatePR mocks base method
func (m *MockTranslator) TranslatePR(reader io.Reader) (*pb.PullRequest, error) {
	ret := m.ctrl.Call(m, "TranslatePR", reader)
	ret0, _ := ret[0].(*pb.PullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TranslatePR indicates an expected call of TranslatePR
func (mr *MockTranslatorMockRecorder) TranslatePR(reader interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranslatePR", reflect.TypeOf((*MockTranslator)(nil).TranslatePR), reader)
}
