syntax = "proto3";
option go_package = "pb";
package models;

import "creds.proto";
import "storage.proto";
import "vcshandler.proto";

//this is a direct translation of the ocelot.yaml file
message BuildConfig {
    // either image or machineTag is required
    // image is the docker image to run the build in
    string image = 1;
    // machineTag is the
    // @inject_tag: yaml:"machineTag"
    string machineTag = 9;
    // @inject_tag: yaml:"buildTool"
    string buildTool = 2;
    repeated string packages = 3;
    repeated string branches = 4;
    repeated string env = 5;
    repeated Stage stages = 7;
    Notifications notify = 8;
}

message Stage {
    repeated string env = 1;
    repeated string script = 2;
    string name = 3;
    // @inject_tag: yaml:"trigger"
    Triggers trigger = 4;
    // @inject_tag: yaml:"triggers"
    repeated string Triggers = 5;
}

// todo: move to a new notifications.proto?
message Notifications {
    Slack slack = 1;
}

// todo: move to a new notifications.proto?
message Slack {
    // channel is which channel to post to. if empty, will be default channel set up by person who created url
    string channel = 1;
    //  identifier attached to url uploaded via `ocelot creds slack add`
    string identifier = 2;
    // on is what type of event to trigger a webhook on can be both PASS and FAIL
    repeated StageResultVal on = 3;
}

message Result {
    string stage = 1;
    StageResultVal status = 2;
    string error = 3;
    repeated string messages = 4;
}

message Triggers {
    repeated string branches = 1;
}


enum StageResultVal {
    PASS = 0;
    FAIL = 1;
    SKIP = 2;
}

message WerkerTask {
    string vaultToken = 1;
    string checkoutHash = 2;
    BuildConfig buildConf = 3;
    string vcsToken = 4;
    SubCredType vcsType = 9;
    string fullName = 6;
    int64 id = 7; // database id
    string branch = 8;
    SignaledBy signaledBy = 10;
    // id from vcs to be able to access pull request later
//    string prId = 11;
    PrWerkerData prData = 12;
    ChangesetData changesetData = 13;
}

//don't think we'll need PushBuildBundle/PRBuildBundle, but keep until I know for sure//
//
//message PushBuildBundle {
//    BuildConfig config = 1;
//    RepoPush pushData = 2;
//    string vaultToken = 3;
//    string checkoutHash = 4;
//}
//
//message PRBuildBundle {
//    BuildConfig config = 1;
//    PullRequest prData = 2;
//    string vaultToken = 3;
//    string checkoutHash = 4;
//}


//type ChangesetData struct {
//filesChanged []string
//commitTexts  []string
//branch       string
//}

message ChangesetData {
    repeated string filesChanged = 1;
    repeated string commitTexts = 2;
    string branch = 3;
}