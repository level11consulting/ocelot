syntax = "proto3";
package organization;

import "state.proto";
import "credential.proto";
import "google/protobuf/timestamp.proto";

// Defines our major organizational types: orgs and repos
// Repos are repositories of code representing a codebase to build

// Server returns org as response
message org_register_request {
    string name = 1;
}

message org {
    int32 id = 1;
    string name = 2;
    state.ACTIVE_STATE active_state = 3; 
}

// Server returns org as response
message org_enable_request {
    string name = 1;
}

// Server returns org as response
message org_disable_request {
    string name = 1;
}

// Server returns org as response
message org_delete_request {
    string name = 1;
    bool force = 2;
}

// Server returns registered_repo as response
message repo_register_request {
    string org = 1;
    credential.VCS_TYPE vcs_type = 2;
    string uri = 3;
}

// When updating only one of choice(build, notify) state, we send
// our desired state for the one we wish to update, and UNKNOWN for
// the other. This tells the server to leave that state to whatever
// exists already in the database. One can update both at the same
// time as well.
// Server returns registered_repo as response
message registered_repo_update_state_request {
    string org = 1;
    string account = 2;
    string repo = 3;
    state.ACTIVE_STATE build_activity_state = 4;
    state.ACTIVE_STATE notify_activity_state = 5;
}

// Server returns registered_repo as response
message registered_repo_update_uri_request {
    string org = 1;
    string account = 2;
    string repo = 3;
    string uri = 4;
}

// Server returns registered_repo as response
message registered_repo_delete_request {
    string org = 1;
    string account = 2;
    string repo = 3;
}

// registered repo -> a repo registered with orbitalci
// remove active_state field from database -> redundant
message registered_repo {
    int32 id = 1;
    int32 vcs_creds_id = 2;
    string uri = 3;
    state.ACTIVE_STATE build_active_state = 4;
    state.ACTIVE_STATE notify_active_state = 5;
    int32 next_build_index = 6;
}

// Server returns polled_repo as response
message repo_register_polling_expression_request {
    string org = 1;
    string account = 2;
    string repo = 3;
    string branch = 4;
    string cron_expression = 5;
}

// Server returns polled_repo as response
message repo_update_polling_state_request {
    string org = 1;
    string account = 2;
    string repo = 3;
    string branch = 4;
    state.ACTIVE_STATE active_state = 5;
}

// polled repo -> an entry that contains a cron expression that determines when orbitalci polls the repo to build it
message polled_repo {
    string uri = 1;
    string cron_expression = 2;
    string branch = 3;
    google.protobuf.Timestamp last_polled_time = 4;
    state.ACTIVE_STATE active_state = 5;
}

service organization_service {
    rpc register_org(org_register_request) returns (org);
    rpc enable_org(org_enable_request) returns (org);
    rpc disable_org(org_disable_request) returns (org);
    rpc delete_org(org_delete_request) returns (org);
    rpc register_repo(repo_register_request) returns (registered_repo);
    rpc update_repo_state(registered_repo_update_state_request) returns (registered_repo);
    rpc update_repo_uri(registered_repo_update_uri_request) returns (registered_repo);
    rpc poll_repo(repo_register_polling_expression_request) returns (polled_repo);
    rpc update_repo_polling_state(repo_update_polling_state_request) returns (polled_repo);
}
