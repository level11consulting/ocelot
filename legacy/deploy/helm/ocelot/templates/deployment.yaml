{{/* admin service deployment */}}
{{- if .Values.admin.enabled }}
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: "admin-{{ template "ocelot.fullname" . }}"
  labels:
    app: "admin-{{ template "ocelot.name" . }}"
    chart: {{ template "ocelot.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.admin.replicaCount }}
  selector:
    matchLabels:
      app: admin-{{ template "ocelot.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: admin-{{ template "ocelot.name" . }}
        release: {{ .Release.Name }}
    spec:
      serviceAccountName: "{{ .Values.serviceAccount }}"
    {{ if .Values.ImagePullSecret }}
      imagePullSecrets:
      - name: "{{.Values.ImagePullSecret }}"
    {{ end }}
      volumes:
      - name: docker-sock-volume
        hostPath:
          # location on host
          path: /var/run/docker.sock
          # this field is optional
          type: File
      {{ template "tokenVolumeSpec" . }}
      {{ template "tokenInit" . }}
      containers:
        {{ template "tokenSidecar" . }}
        - name: admin-{{ .Chart.Name }}
          image: "{{ .Values.admin.image.repository }}:{{ .Values.admin.image.tag }}"
          imagePullPolicy: {{ .Values.admin.image.pullPolicy }}
          command: ["/admin"]
          args:
            - -consul-host=$(CONSUL_HOST)
          volumeMounts: 
            - mountPath: /var/run/docker.sock
              name: docker-sock-volume
          {{ template "tokenMountPath" . }}
          ports:
            - name: grpc
              containerPort: 10000
              protocol: TCP
            - name: http
              containerPort: 11000
          env:
            - name: CONSUL_HOST
          {{ if .Values.consul.host }}
              value: "{{ .Values.consul.host }}"
          {{ else }}
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
          {{ end }}
          {{ if .Values.consul.port }}
            - name: CONSUL_PORT
              value: "{{ .Values.consul.port }}"
          {{ end }}
            - name: VAULT_ADDR
              value: "{{.Values.vault.protocol}}://{{.Values.vault.ip}}:{{.Values.vault.port}}"
            {{ template "envToken" . }}
            - name: NSQLOOKUPD_IP
              value: "{{.Values.nsq.nsqlookupd.ip}}"
            - name: NSQLOOKUPD_PORT
              value: "{{.Values.nsq.nsqlookupd.port}}"
            - name: NSQD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: NSQD_PORT
              value: "{{.Values.nsq.nsqd.port}}"
            - name: LOG_LEVEL
              value: "{{.Values.loglevel}}"
            {{ if .Values.admin.swagger }}
            - name: SWAGGERITUP
              value: "true"
            {{ end }}
          {{if .Values.KVPrefix}}
            - name: PATH_PREFIX
              value: "{{.Values.KVPrefix}}"
          {{end}}
#           livenessProbe:
#             httpGet:
#               path: /v1/creds
#               port: http
          # readinessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          resources:
{{ toYaml .Values.admin.resources | indent 12 }}
    {{- with .Values.admin.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.admin.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.admin.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
{{- end }}
---
{{- if .Values.hookhandler.enabled }}
{{/* hookhandler service deployment */}}
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: "hookhandler-{{ template "ocelot.fullname" . }}"
  labels:
    app: "hookhandler-{{ template "ocelot.name" . }}"
    chart: {{ template "ocelot.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.hookhandler.replicaCount }}
  selector:
    matchLabels:
      app: hookhandler-{{ template "ocelot.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: hookhandler-{{ template "ocelot.name" . }}
        release: {{ .Release.Name }}
    spec:
      serviceAccountName: "{{ .Values.serviceAccount }}"
    {{ if .Values.ImagePullSecret }}
      imagePullSecrets:
      - name: {{.Values.ImagePullSecret }}
    {{ end }}
      volumes:
      - name: docker-sock-volume
        hostPath:
          # location on host
          path: /var/run/docker.sock
          # this field is optional
          type: File
      {{ template "tokenVolumeSpec" . }}
      {{ template "tokenInit" . }}
      containers:
        {{ template "tokenSidecar" . }}
        - name: hookhandler-{{ .Chart.Name }}
          image: "{{ .Values.hookhandler.image.repository }}:{{ .Values.hookhandler.image.tag }}"
          imagePullPolicy: {{ .Values.hookhandler.image.pullPolicy }}
          command: ["/hookhandler"]
          args:
            - -consul-host=$(CONSUL_HOST)
          volumeMounts: 
            - mountPath: /var/run/docker.sock
              name: docker-sock-volume
            {{ template "tokenMountPath" . }}
          ports:
            - name: http
              containerPort: 8088
              protocol: TCP
          env:
            - name: CONSUL_HOST
          {{ if .Values.consul.host }}
              value: "{{ .Values.consul.host }}"
          {{ else }}
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
          {{ end }}
          {{ if .Values.consul.port }}
            - name: CONSUL_PORT
              value: "{{ .Values.consul.port }}"
          {{ end }}
            - name: VAULT_ADDR
              value: "{{.Values.vault.protocol}}://{{.Values.vault.ip}}:{{.Values.vault.port}}"
            {{ template "envToken" . }}
            - name: NSQLOOKUPD_IP
              value: "{{.Values.nsq.nsqlookupd.ip}}"
            - name: NSQLOOKUPD_PORT
              value: "{{.Values.nsq.nsqlookupd.port}}"
            - name: NSQD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: NSQD_PORT
              value: "{{.Values.nsq.nsqd.port}}"
            - name: LOG_LEVEL
              value: "{{.Values.loglevel}}"
          {{if .Values.KVPrefix}}
            - name: PATH_PREFIX
              value: "{{.Values.KVPrefix}}"
          {{end}}
          # livenessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          # readinessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          resources:
{{ toYaml .Values.admin.resources | indent 12 }}
    {{- with .Values.admin.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.admin.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.admin.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
{{- end }}
---
{{/* poller service deployment */}}
{{- if .Values.poller.enabled }}
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: "poller-{{ template "ocelot.fullname" . }}"
  labels:
    app: "poller-{{ template "ocelot.name" . }}"
    chart: {{ template "ocelot.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.poller.replicaCount }}
  selector:
    matchLabels:
      app: poller-{{ template "ocelot.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: poller-{{ template "ocelot.name" . }}
        release: {{ .Release.Name }}
    spec:
      serviceAccountName: "{{ .Values.serviceAccount }}"
    {{ if .Values.ImagePullSecret }}
      imagePullSecrets:
      - name: {{.Values.ImagePullSecret }}
    {{ end }}
      volumes:
      - name: docker-sock-volume
        hostPath:
          # location on host
          path: /var/run/docker.sock
          # this field is optional
          type: File
      {{ template "tokenVolumeSpec" . }}
      {{ template "tokenInit" . }}
      containers:
        {{ template "tokenSidecar" . }}
        - name: poller-{{ .Chart.Name }}
          image: "{{ .Values.poller.image.repository }}:{{ .Values.poller.image.tag }}"
          imagePullPolicy: {{ .Values.poller.image.pullPolicy }}
          volumeMounts: 
            - mountPath: /var/run/docker.sock
              name: docker-sock-volume
          {{ template "tokenMountPath" . }}
          env:
            - name: CONSUL_HOST
          {{ if .Values.consul.host }}
              value: "{{ .Values.consul.host }}"
          {{ else }}
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
          {{ end }}
          {{ if .Values.consul.port }}
            - name: CONSUL_PORT
              value: "{{ .Values.consul.port }}"
          {{ end }}
            - name: VAULT_ADDR
              value: "{{.Values.vault.protocol}}://{{.Values.vault.ip}}:{{.Values.vault.port}}"
            {{ template "envToken" . }}
            - name: NSQLOOKUPD_IP
              value: "{{.Values.nsq.nsqlookupd.ip}}"
            - name: NSQLOOKUPD_PORT
              value: "{{.Values.nsq.nsqlookupd.port}}"
            - name: NSQD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: NSQD_PORT
              value: "{{.Values.nsq.nsqd.port}}"
            - name: LOG_LEVEL
              value: "{{.Values.loglevel}}"
          {{if .Values.KVPrefix}}
            - name: PATH_PREFIX
              value: "{{.Values.KVPrefix}}"
          {{end}}
          resources:
{{ toYaml .Values.admin.resources | indent 12 }}
    {{- with .Values.admin.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.admin.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.admin.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
{{- end }}