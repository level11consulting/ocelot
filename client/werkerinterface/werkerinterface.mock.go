// Code generated by MockGen. DO NOT EDIT.
// Source: werkerteller.go

// Package build_signaler is a generated GoMock package.
package werkerinterface

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	"github.com/level11consulting/ocelot/build/buildeventhandler/push/buildjob"
	models "github.com/level11consulting/ocelot/models"
	pb "github.com/level11consulting/ocelot/models/pb"
)

// MockCommitPushWerkerTeller is a mock of CommitPushWerkerTeller interface
type MockCommitPushWerkerTeller struct {
	ctrl     *gomock.Controller
	recorder *MockCommitPushWerkerTellerMockRecorder
}

// MockCommitPushWerkerTellerMockRecorder is the mock recorder for MockCommitPushWerkerTeller
type MockCommitPushWerkerTellerMockRecorder struct {
	mock *MockCommitPushWerkerTeller
}

// NewMockCommitPushWerkerTeller creates a new mock instance
func NewMockCommitPushWerkerTeller(ctrl *gomock.Controller) *MockCommitPushWerkerTeller {
	mock := &MockCommitPushWerkerTeller{ctrl: ctrl}
	mock.recorder = &MockCommitPushWerkerTellerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommitPushWerkerTeller) EXPECT() *MockCommitPushWerkerTellerMockRecorder {
	return m.recorder
}

// TellWerker mocks base method
func (m *MockCommitPushWerkerTeller) TellWerker(push *pb.Push, conf *buildjob.Signaler, handler models.VCSHandler, token string, force bool, sigBy pb.SignaledBy) error {
	ret := m.ctrl.Call(m, "TellWerker", push, conf, handler, token, force, sigBy)
	ret0, _ := ret[0].(error)
	return ret0
}

// TellWerker indicates an expected call of TellWerker
func (mr *MockCommitPushWerkerTellerMockRecorder) TellWerker(push, conf, handler, token, force, sigBy interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TellWerker", reflect.TypeOf((*MockCommitPushWerkerTeller)(nil).TellWerker), push, conf, handler, token, force, sigBy)
}

// MockPRWerkerTeller is a mock of PRWerkerTeller interface
type MockPRWerkerTeller struct {
	ctrl     *gomock.Controller
	recorder *MockPRWerkerTellerMockRecorder
}

// MockPRWerkerTellerMockRecorder is the mock recorder for MockPRWerkerTeller
type MockPRWerkerTellerMockRecorder struct {
	mock *MockPRWerkerTeller
}

// NewMockPRWerkerTeller creates a new mock instance
func NewMockPRWerkerTeller(ctrl *gomock.Controller) *MockPRWerkerTeller {
	mock := &MockPRWerkerTeller{ctrl: ctrl}
	mock.recorder = &MockPRWerkerTellerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPRWerkerTeller) EXPECT() *MockPRWerkerTellerMockRecorder {
	return m.recorder
}

// TellWerker mocks base method
func (m *MockPRWerkerTeller) TellWerker(push *pb.PullRequest, prData *pb.PrWerkerData, conf *buildjob.Signaler, handler models.VCSHandler, token string, force bool, sigBy pb.SignaledBy) error {
	ret := m.ctrl.Call(m, "TellWerker", push, prData, conf, handler, token, force, sigBy)
	ret0, _ := ret[0].(error)
	return ret0
}

// TellWerker indicates an expected call of TellWerker
func (mr *MockPRWerkerTellerMockRecorder) TellWerker(push, prData, conf, handler, token, force, sigBy interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TellWerker", reflect.TypeOf((*MockPRWerkerTeller)(nil).TellWerker), push, prData, conf, handler, token, force, sigBy)
}
