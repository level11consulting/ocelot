syntax = "proto3";
option go_package = "pb";
package models;


enum CredType {
    NIL_CT = 0;
    // VCS Cred type has 2 SubCredTypes: BITBUCKET and GITHUB
    VCS = 1;
    // REPO has 2 SubCredTypes: NEXUS and DOCKER
    REPO = 2;
    // K8S has 1 SubCredType: KUBECONF
    K8S = 3;
    // SSH has 1 SubCredType: SSHKEY
    SSH = 5;
    // NOTIFIER has 1 SubCredType: SLACK
    NOTIFIER = 6;
    // APPLE has 1 SubCredType: DEVPROFILE
    APPLE = 7;
    // GENERIC has 1 SubCredType: ENV
    GENERIC = 8;

}

enum SubCredType {

    NIL_SCT    = 0;
    /// VCS ///
    BITBUCKET  = 1;
    GITHUB     = 2;
    /// REPO ///
    NEXUS      = 3;
    MAVEN      = 4;
    DOCKER     = 5;
    MINIO      = 12;
    /// K8S ///
    KUBECONF   = 6;
    /// SSH ///
    SSHKEY     = 8;
    /// NOTIFY ///
    SLACK      = 9;
    /// APPLE ///
    DEVPROFILE = 10;
    /// GENERIC ///
    ENV        = 11;
    HELM_REPO  = 13;
}

message AllCredsWrapper {
    // All repository credentials for integrations
    // @inject_tag: yaml:"repoCreds"
    RepoCredWrapper repoCreds = 1;
    // All VCS credentials for building
    // @inject_tag: yaml:"vcsCreds"
    CredWrapper vcsCreds = 3;
}

// just a container for a list of VCSCreds
message CredWrapper {
    repeated VCSCreds vcs = 2;
}

message SSHKeyWrapper {
    // account name to associate ssh key with
    string acctName = 1;
    // the contents of the private key
    bytes privateKey = 2;
    // There is only one subType taht is valid for SSHKeyWrapper, and it is SSHKEY
    SubCredType subType = 10;
    // identifier is the unique identifier for when an ssh key is not associated with a VCS account.
    string identifier = 11;
    // id is credentials id from database
    int64 id = 12;
}

message SSHWrap {
    repeated SSHKeyWrapper keys = 1;
}
message VCSCreds {
    // clientId is generated by creating an oAuth consumer in bitbucket. it is required to generate tokens.
    // @inject_tag: yaml:"clientId"
    string clientId = 1;
    // clientSecret is generated by creating an oAuth consumer in bitbucket. it is required to generate tokens.
    // @inject_tag: yaml:"clientSecret"
    string clientSecret = 2;
    // identifier is the name the user calls teh credential set
    string identifier = 8;
    // tokenUrl is the url at which to retrieve the token
    // @inject_tag: yaml:"tokenURL"
    string tokenURL = 3;
    // @inject_tag: yaml:"acctName"
    // acctName is the account to associate the VCSCred with. Must be the account name of the owner of the repository they wish to track (ie level11consulting)
    string acctName = 4;

    // just a string that says whether or not there is an ssh key on file
    // @inject_tag: yaml:"sshFileLoc"
    string sshFileLoc = 6;
    // there is only one subtype that is valid for VCS creds at this time, and it is BITBUCKET
    // @inject_tag: yaml:"subType"
    SubCredType subType = 10;
    // id is credentials id from database
    int64 id = 11;
}


// container for list of repo creds
message RepoCredWrapper {
    repeated RepoCreds repo = 3;
}


message RepoCreds {
    // username of repository
    string username = 1;
    // password of repository
    string password = 2;

    // @inject_tag: yaml:"repoUrl"
    //repoUrl is the url that is associated with that repository, for example hub.docker.io
    string repoUrl= 6;
    // identifier is the unique identifier that is associated with this acctName
    string identifier = 8;
    // @inject_tag: yaml:"acctName"
    // account name (same as from vcs)
    string acctName = 4;
    // @inject_tag: yaml:"subType"
    // there are two subtypes that are valid for RepoCreds: DOCKER, NEXUS
    SubCredType subType = 10;
    // id is credentials id from database
    int64 id = 11;

}

message K8SCreds {
    // account name to associate this credential with
    string acctName = 1;
    // k8scontents is the contents of the kubeconfig file
    string k8sContents = 2;
    // identifier in K8s creds, typically the name of the cluster, as expected use case is one config per cluster
    string identifier = 3;
    // @inject_tag: yaml:"subType"
    // there is currently only one subtype for k8SCreds, and it is KUBECONF
    SubCredType subType = 6;
    // id is credentials id from database
    int64 id = 7;

}

message K8SCredsWrapper {
    repeated K8SCreds K8SCreds = 2;
}

message AppleCreds {
    // account name to associate this credential with
    string acctName = 1;
    // identifier in dev profile creds is currently irrelevant, as there can only be one per account
    string identifier = 3;
    // appleSecrets is the zip contents of the apple developer profile that you export in XCode ??
    bytes appleSecrets= 2;
    // appleSecretsPassword is the password you set when you export the developer profile
    string appleSecretsPassword = 6;
    // @inject_tag: yaml:"subType"
    SubCredType subType = 5;
    // id is credentials id from database
    int64 id = 7;
}

message AppleCredsWrapper {
    repeated AppleCreds appleCreds = 1;
}

message NotifyWrap {
    repeated NotifyCreds creds = 1;
}

message NotifyCreds {
    // account name to associate integration cred with
    string acctName = 1;
    // There is currently only one subType that is valid for Integrations, and it is SLACK
    SubCredType subType = 2;
    // identifier is the unique identifier for the integration
    string identifier = 3;
    // clientSecret is the secret associated with the integration cred
    string clientSecret = 4;
    // detailUrlBase is the base url for an ocelot ui. when building the notification, will
    //   add {{detailUrlBase}}/repos/{{account}}/{{repo}}/{{buildId}}
    string detailUrlBase = 5;
    // id is credentials id from database
    int64 id = 6;
}

message GenericWrap {
    repeated GenericCreds creds = 1;
}

message GenericCreds {
    // account name to associate integration cred with
    string acctName = 1;
    // Subtypes are ENV, HELM_REPO
    SubCredType subType = 2;
    // identifier is the unique identifier for the integration
    string identifier = 3;
    // clientSecret is the secret associated with the integration cred
    string clientSecret = 4;
    // id is credentials id from database
    int64 id = 5;
}